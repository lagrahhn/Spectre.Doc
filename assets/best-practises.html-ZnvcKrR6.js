import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,e as t,o as a}from"./app-Bx56pAuY.js";const o={};function n(r,e){return a(),i("div",null,e[0]||(e[0]=[t(`<h1 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h1><p>Spectre.Console 使开发者编写控制台应用程序变得更加容易。它被设计为易于使用且灵活。</p><h2 id="输出" tabindex="-1"><a class="header-anchor" href="#输出"><span>输出</span></a></h2><p>Spectre.Console 提供了多种输出方法和函数，但它们依赖于用户的控制台来渲染。</p><p>许多因素决定了控制台可以渲染的内容：</p><ul><li>输出文本的编码。</li><li>控制台字体。</li><li>控制台窗口大小。</li><li>代码页。</li><li>终端本身。</li><li>控制台的背景颜色。</li></ul><p>Spectre.Console 可以自动检测其中的一些项目。而有些项目只能由用户配置，无法自动检测。</p><p>Spectre.Console 可以检测以下项目：</p><ul><li>输出编码：内置的组件将使用检测到的编码作为备选方案，例如，如果一个 <code>Table</code> 被配置为使用圆角边框，但用户的输出编码不支持扩展的 ASCII 字符，则会使用备用字符。</li><li>窗口大小：在写入屏幕时，Spectre.Console 会知道写满宽度时的字符数。</li><li>大多数终端：Spectre.Console 会尝试检测正在运行的控制台，并匹配其<a href="/api/Spectre.Console/Capabilities">功能(暂无对应页)</a>。</li></ul><p>不能自动检测的项目：</p><ul><li>控制台字体：Spectre.Console 将假设用户终端已有一个相对现代且等宽的字体。如果用户的控制台字体不是等宽的，则某些内容的输出(如 <code>Table</code>)将是不正确的。支持的字符也可能因字体而异，特别是对于一些现代特性，如 Powerline 字符和 NerdFonts。</li><li>背景颜色和配置的前景颜色。</li></ul><h3 id="输出最佳实践" tabindex="-1"><a class="header-anchor" href="#输出最佳实践"><span>输出最佳实践</span></a></h3><p><strong>应该</strong>在多个终端中测试您的应用程序。在 Windows 上，内置的 <code>cmd.exe</code> 和 <code>Windows Terminal</code> 都适用于各种功能。</p><p><strong>不应该</strong>在代码中硬编码表情符号和扩展 Unicode 字符作为默认输出字符串。无法保证用户的控制台支持这些字符，而且 Spectre.Console 也无法自动回退。为了确保对各种终端的广泛支持，请允许用户选择是否使用扩展 Unicode 字符，或者根据应用程序类型，允许用户自定义输出并手动配置这些字符。</p><p><strong>不应该</strong>假设用户的背景颜色是黑色。它可以是任何颜色，包括白色。虽然 Spectre.Console 允许您使用多达 24 位的颜色，但不要假设它们在用户的控制台上显示得美观。如果您坚持使用标准的 16 种 ANSI 颜色，Spectre.Console 会让您的终端使用用户终端主题中配置的颜色。如果您使用 8 位或 24 位颜色作为前景文本，建议您也设置适当的背景颜色以匹配。</p><p><strong>应该</strong>在通过 Markup 输出任何用户输入或任何外部数据时，使用 <a href="/api/Spectre.Console/Markup/e35ae760"><code>Markup.Escape</code>(暂未有该文档)</a> 方法对数据进行转义。否则，包含 <code>[</code> 或 <code>]</code> 的任何用户输入都可能导致渲染时出现运行时错误。</p><p><strong>考虑</strong>用<br><a href="/api/Spectre.Console/AnsiConsole/e39ddb49"><code>MarkupInterpolated</code>(未实现)</a> 和 <a href="/api/Spectre.Console/AnsiConsole/f807e7f9"><code>MarkupLineInterpolated</code>(未实现)</a> 替换 <code>Markup</code> 和 <code>MarkupLine</code>。这两种方法都会自动转义插值字符串中的所有数据。当与 <code>Table</code> 和 <code>Tree</code> 等组件一起工作时，考虑使用 <a href="/api/Spectre.Console/Markup/288e31b4"><code>Markup.FromInterpolated</code>(未实现)</a> 从插值字符串生成 <code>IRenderable</code>。</p><h3 id="实时渲染最佳实践" tabindex="-1"><a class="header-anchor" href="#实时渲染最佳实践"><span>实时渲染最佳实践</span></a></h3><p>Spectre.Console 有多种 <a href="live">实时渲染功能(未实现)</a> 的组件。这些组件可用于显示在用户控制台上更新和刷新的数据。为此，组件渲染有一个渲染循环，该循环向屏幕写入内容，然后擦除之前的输出再重新写入。</p><p><strong>应该</strong>尽量保持单线程上的渲染逻辑尽可能简单。在实时渲染过程中渲染额外内容可能会导致渲染损坏。</p><p><strong>不应该</strong>同时使用多个实时渲染组件。像前面的提示一样，显示 <code>Status</code> 控件和 <code>Progress</code> 是不受支持的，并且可能导致渲染错误。</p><p><strong>应该</strong>在 <code>Start</code> 方法中创建额外的工作线程，<strong>但是</strong>在主线程上渲染。对于进度条等内容，可以从 <code>Start</code> 方法创建多个线程或任务以并发执行。为了确保正确渲染，请确保更新组件的调用是在主线程上完成的。</p><h3 id="单元测试最佳实践" tabindex="-1"><a class="header-anchor" href="#单元测试最佳实践"><span>单元测试最佳实践</span></a></h3><p>对于控制台输出的测试，Spectre.Console 有一个可以注入到应用程序中的 <a href="/api/Spectre.Console/IAnsiConsole"><code>IAnsiConsole</code></a>。<a href="https://www.nuget.org/packages/Spectre.Console.Testing/" target="_blank" rel="noopener noreferrer">Spectre.Console.Test</a> NuGet 包包含用于捕获控制台输出以进行验证的实用工具。有关进一步指导，请参阅 <a href="cli/unit-testing">单元测试(未实现)</a> 页面。</p><h3 id="用于最佳实践的分析器" tabindex="-1"><a class="header-anchor" href="#用于最佳实践的分析器"><span>用于最佳实践的分析器</span></a></h3><p>Spectre.Console 有一个 <a href="https://www.nuget.org/packages/Spectre.Console.Analyzer" target="_blank" rel="noopener noreferrer">分析器</a>，有助于防止上述编写控制台输出时的一些常见错误，例如同时使用多个实时渲染组件，或在 <code>IAnsiConsole</code> 可用时使用静态 <code>AnsiConsole</code> 类。</p><h3 id="原生-aot-支持" tabindex="-1"><a class="header-anchor" href="#原生-aot-支持"><span>原生 AOT 支持</span></a></h3><p>将您的应用程序发布为原生 AOT 与 Spectre.Console 会产生一个自包含的应用程序，并且已经 ahead-of-time(AOT) 编译为原生代码。原生 AOT 应用程序具有更快的启动时间和更小的内存占用。这些应用程序可以在没有安装 .NET 运行时的机器上运行。</p><p>要在您的应用程序中启用 AOT 支持，请在项目文件中添加 <code>&lt;PublishAot&gt;true&lt;/PublishAot&gt;</code>。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">PropertyGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">PublishAot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;true&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">PublishAot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">PropertyGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前 Spectre.Console 对 AOT 的支持：</p><ul><li>☑️ Spectre.Console</li><li>❌ Spectre.Console.Cli</li><li>☑️ Spectre.Console.Json</li><li>☑️ Spectre.Console.ImageSharp</li></ul><p>Spectre.Console.Cli 依赖于反射并在运行时发现类型，因此目前不支持 AOT。</p><p>Spectre.Console 支持 AOT，但有以下限制：</p><ul><li><code>WriteException</code> 将输出简单的堆栈跟踪，并忽略设置的任何 <code>ExceptionFormats</code>。</li></ul><h3 id="配置-windows-终端以支持-unicode-和-emoji" tabindex="-1"><a class="header-anchor" href="#配置-windows-终端以支持-unicode-和-emoji"><span>配置 Windows 终端以支持 Unicode 和 Emoji</span></a></h3><p>Windows 终端支持 Unicode 和 Emoji。然而，Powershell 和 cmd.exe 等 shell 不支持。关于这两者的区别，请参见 <a href="https://www.hanselman.com/blog/whats-the-difference-between-a-console-a-terminal-and-a-shell" target="_blank" rel="noopener noreferrer">What&#39;s the difference between a console, a terminal and a shell</a>。</p><p>对于 PowerShell，以下命令将启用 Unicode 和 Emoji 支持。您可以将其添加到 <code>profile.ps1</code> 文件中：</p><div class="language-powershell line-numbers-mode" data-highlighter="shiki" data-ext="powershell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]::InputEncoding </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]::OutputEncoding </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">System.Text.UTF8Encoding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]::new()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>对于 cmd.exe，需要执行以下步骤以启用 Unicode 和表情符号支持：</p><ol><li>运行 <code>intl.cpl</code>。</li><li>单击“管理”选项卡。</li><li>单击“更改系统区域设置”按钮。</li><li>选中“使用 Unicode UTF-8 以支持全球语言”复选框。</li><li>重启。</li></ol><p>您还需要确保您的控制台应用程序配置为使用支持 Unicode 和表情符号的字体，例如 Cascadia Code。</p>`,42)]))}const c=s(o,[["render",n]]),d=JSON.parse('{"path":"/zh/best-practices/best-practises.html","title":"最佳实践","lang":"zh-CN","frontmatter":{"title":"最佳实践","icon":"object-group","order":2,"category":["指南"],"tag":["布局"],"description":"最佳实践 Spectre.Console 使开发者编写控制台应用程序变得更加容易。它被设计为易于使用且灵活。 输出 Spectre.Console 提供了多种输出方法和函数，但它们依赖于用户的控制台来渲染。 许多因素决定了控制台可以渲染的内容： 输出文本的编码。 控制台字体。 控制台窗口大小。 代码页。 终端本身。 控制台的背景颜色。 Spectre....","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"最佳实践\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-20T01:49:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/zh/best-practices/best-practises.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"最佳实践"}],["meta",{"property":"og:description","content":"最佳实践 Spectre.Console 使开发者编写控制台应用程序变得更加容易。它被设计为易于使用且灵活。 输出 Spectre.Console 提供了多种输出方法和函数，但它们依赖于用户的控制台来渲染。 许多因素决定了控制台可以渲染的内容： 输出文本的编码。 控制台字体。 控制台窗口大小。 代码页。 终端本身。 控制台的背景颜色。 Spectre...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-20T01:49:23.000Z"}],["meta",{"property":"article:tag","content":"布局"}],["meta",{"property":"article:modified_time","content":"2025-05-20T01:49:23.000Z"}]]},"git":{"createdTime":1747705763000,"updatedTime":1747705763000,"contributors":[{"name":"lagrahhn","username":"lagrahhn","email":"3220135059@qq.com","commits":1,"url":"https://github.com/lagrahhn"}]},"readingTime":{"minutes":5.42,"words":1625},"filePathRelative":"zh/best-practices/best-practises.md","autoDesc":true}');export{c as comp,d as data};
