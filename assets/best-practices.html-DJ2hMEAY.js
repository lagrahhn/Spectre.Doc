import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,e as a,o as r}from"./app-Bx56pAuY.js";const i={};function s(n,e){return r(),o("div",null,e[0]||(e[0]=[a(`<h1 id="best-practices" tabindex="-1"><a class="header-anchor" href="#best-practices"><span>Best Practices</span></a></h1><p>Spectre.Console works hard to make writing console applications easier for<br> developers. It is designed to be easy to use and to be flexible, but there are<br> some things that can be a bit tricky.</p><h2 id="output" tabindex="-1"><a class="header-anchor" href="#output"><span>Output</span></a></h2><p>Spectre.Console has a number of output methods and functions, but they rely on<br> the user&#39;s console to render.</p><p>Many things make up what a console can render.</p><ul><li>It&#39;s output encoding.</li><li>The console font.</li><li>The size of the windows.</li><li>The codepage.</li><li>The terminal itself.</li><li>The console&#39;s background color.</li></ul><p>Many of these items can be auto-detected by Spectre.Console. Some of these<br> items can only be configured by the user and cannot be detected automatically.</p><p>Spectre.Console can detect the following items:</p><ul><li>Output encoding: the built-in widgets will use the encoding that is detected to fallback when needed when UTF-8 is not detected e.g. if a <code>Table</code> is configured to use a rounded border, but a user&#39;s output encoding does not support the extended ASCII characters then a fallback set of characters will be used.</li><li>Size of the windows: at the time of writing to the screen, Spectre.Console will know the number of characters when writing full-width widths.</li><li>Most terminals: Spectre.Console will try to detect the running Console and match their <a href="/api/Spectre.Console/Capabilities">capabilities</a>.</li></ul><p>Things that cannot be detected automatically:</p><ul><li>Console font: Spectre.Console will assume a relatively modern and fixed width font. If a user&#39;s console font is not fixed width, then the output for some items such as <code>Table</code> will be incorrect. The supported characters can also vary between fonts, especially with some modern features like Powerline characters and NerdFonts.</li><li>The background color and configured foreground colors.</li></ul><h3 id="output-best-practices" tabindex="-1"><a class="header-anchor" href="#output-best-practices"><span>Output Best Practices</span></a></h3><p><strong>Do</strong> test your application in multiple terminals. On Windows machines, the<br> built-in <code>cmd.exe</code> and <code>Windows Terminal</code> both work well for a variety of<br> capabilities.</p><p><strong>Do not</strong> hard-code emojis and extended unicode characters in your code as<br> default output strings. There is no guarantee that the user&#39;s console will<br> support them and Spectre.Console will not be able to fall back automatically.<br> To ensure the widest level of support for various terminals, allow users to<br> either opt in to the use of extended unicode characters or, depending on the<br> type of application, allow the user to customize the output and configure<br> those characters by hand.</p><p><strong>Do not</strong> assume a user&#39;s background color is black. It can be any color,<br> including white. While Spectre.Console allows you to use up to 24-bit colors,<br> don&#39;t assume they&#39;ll look good when displayed on the user&#39;s console. If you<br> stick to the standard 16 ANSI colors, Spectre.Console will tell your terminal<br> to use the color that is configured in the user&#39;s terminal theme. If you are<br> using an 8 or 24-bit color for the foreground text, it is recommended that you<br> also set an appropriate background color to match.</p><p><strong>Do</strong> escape data when outputting any user input or any external data via<br> Markup using the <a href="/api/Spectre.Console/Markup/e35ae760"><code>Markup.Escape</code></a><br> method on the data. Any user input containing <code>[</code> or <code>]</code> will likely cause a<br> runtime error while rendering otherwise.</p><p><strong>Consider</strong> replacing <code>Markup</code> and <code>MarkupLine</code> with<br><a href="/api/Spectre.Console/AnsiConsole/e39ddb49"><code>MarkupInterpolated</code></a> and<br><a href="/api/Spectre.Console/AnsiConsole/f807e7f9"><code>MarkupLineInterpolated</code></a>. Both<br> these methods will automatically escape all data in the interpolated string<br> holes. When working with widgets such as the Table and Tree, consider using<br><a href="/api/Spectre.Console/Markup/288e31b4"><code>Markup.FromInterpolated</code></a> to generate<br> an <code>IRenderable</code> from an interpolated string.</p><h3 id="live-rendering-best-practices" tabindex="-1"><a class="header-anchor" href="#live-rendering-best-practices"><span>Live-Rendering Best Practices</span></a></h3><p>Spectre.Console has a variety of <a href="live">live-rendering capabilities</a> widgets.<br> These widgets can be used to display data that are updated and refreshed on<br> the user&#39;s console. To do so, the widget rendering has a render loop that<br> writes to the screen and then erases the previous output before writing again.</p><p><strong>Do</strong> keep your rendering logic as simple as possible on a single thread.<br> Rendering additional content while a live rendering is in progress can cause<br> the rendering to be corrupted.</p><p><strong>Do not</strong> use multiple live-rendering widgets simultaneously. Like the<br> previous tip, displaying a <code>Status</code> control and a <code>Progress</code> is not supported<br> and can cause rendering corruption.</p><p><strong>Do</strong> create additional work threads within the <code>Start</code> method, <strong>but</strong><br> render on the main thread. For items such as a progress bar, multiple threads<br> or tasks can be created from the <code>Start</code> method for concurrent execution. To<br> ensure proper rendering, ensure that calls to update the widgets are done on<br> the main thread.</p><h3 id="unit-testing-best-practices" tabindex="-1"><a class="header-anchor" href="#unit-testing-best-practices"><span>Unit Testing Best Practices</span></a></h3><p>For testing of console output, Spectre.Console has<br><a href="/api/Spectre.Console/IAnsiConsole"><code>IAnsiConsole</code>（未实现）</a> that can be injected into<br> your application. The<br><a href="https://www.nuget.org/packages/Spectre.Console.Testing/" target="_blank" rel="noopener noreferrer">Spectre.Console.Test</a><br> NuGet package contains utilities for capturing the console output for<br> verification. See the <a href="cli/unit-testing">Unit Testing</a> page for further<br> guidance.</p><h3 id="analyzer-for-best-practices" tabindex="-1"><a class="header-anchor" href="#analyzer-for-best-practices"><span>Analyzer for Best Practices</span></a></h3><p>Spectre.Console has an<br><a href="https://www.nuget.org/packages/Spectre.Console.Analyzer" target="_blank" rel="noopener noreferrer">analyzer</a> that helps<br> prevent some common errors in writing console output from above such as using<br> multiple live rendering widgets simultaneously, or using the static<br><code>AnsiConsole</code> class when <code>IAnsiConsole</code> is available.</p><h3 id="native-aot-support" tabindex="-1"><a class="header-anchor" href="#native-aot-support"><span>Native AOT Support</span></a></h3><p>Publishing your app as Native AOT with Spectre.Console produces an app that&#39;s<br> self-contained and has been ahead-of-time (AOT) compiled to native code.<br> Native AOT apps have faster startup time and smaller memory footprints. These<br> apps can run on machines that don&#39;t have the .NET runtime installed.</p><p>To enable AOT support on your application, Add <code>&lt;PublishAot&gt;true&lt;/PublishAot&gt;</code><br> to your project file.</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">PropertyGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">PublishAot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;true&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">PublishAot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">PropertyGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Current Spectre.Console support for AOT:</p><ul><li>☑️ Spectre.Console</li><li>❌ Spectre.Console.Cli</li><li>☑️ Spectre.Console.Json</li><li>☑️ Spectre.Console.ImageSharp</li></ul><p>Spectre.Console.Cli relies on reflection and discovering types at runtime,<br> preventing it from currently supporting AOT.</p><p>Spectre.Console supports AOT, but with the following limitations</p><ul><li><code>WriteException</code> will output a simple stacktrace and ignore any <code>ExceptionFormats</code> set.</li></ul><h3 id="configuring-the-windows-terminal-for-unicode-and-emoji-support" tabindex="-1"><a class="header-anchor" href="#configuring-the-windows-terminal-for-unicode-and-emoji-support"><span>Configuring the Windows Terminal For Unicode and Emoji Support</span></a></h3><p>Windows Terminal supports Unicode and Emoji. However, the shells such as<br> Powershell and cmd.exe do not. For the difference between the two, see [What&#39;s<br> the difference between a console, a terminal and a<br> shell](<a href="https://www.hanselman.com/blog/whats-the-difference-between-a-console-" target="_blank" rel="noopener noreferrer">https://www.hanselman.com/blog/whats-the-difference-between-a-console-</a><br> a-terminal-and-a-shell).</p><p>For PowerShell, the following command will enable Unicode and Emoji support.<br> You can add this to your <code>profile.ps1</code> file:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  [console]::InputEncoding = [console]::OutputEncoding = [System.Text.UTF8Encoding]::new()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>For cmd.exe, the following steps are required to enable Unicode and Emoji<br> support.</p><ol><li>Run <code>intl.cpl</code>.</li><li>Click the Administrative tab</li><li>Click the Change system locale button.</li><li>Check the &quot;Use Unicode UTF-8 for worldwide language support&quot; checkbox.</li><li>Reboot.</li></ol><p>You will also need to ensure that your Console application is configured to<br> use a font that supports Unicode and Emoji, such as Cascadia Code.</p>`,42)]))}const p=t(i,[["render",s]]),d=JSON.parse('{"path":"/best-practices/best-practices.html","title":"Best Practices","lang":"en-US","frontmatter":{"title":"Best Practices","icon":"object-group","order":2,"category":["指南"],"tag":["布局"],"description":"Best Practices Spectre.Console works hard to make writing console applications easier for developers. It is designed to be easy to use and to be flexible, but there are some thi...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Best Practices\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-20T01:49:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/best-practices/best-practices.html"}],["meta",{"property":"og:site_name","content":"Docs Demo"}],["meta",{"property":"og:title","content":"Best Practices"}],["meta",{"property":"og:description","content":"Best Practices Spectre.Console works hard to make writing console applications easier for developers. It is designed to be easy to use and to be flexible, but there are some thi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-05-20T01:49:23.000Z"}],["meta",{"property":"article:tag","content":"布局"}],["meta",{"property":"article:modified_time","content":"2025-05-20T01:49:23.000Z"}]]},"git":{"createdTime":1747705763000,"updatedTime":1747705763000,"contributors":[{"name":"lagrahhn","username":"lagrahhn","email":"3220135059@qq.com","commits":1,"url":"https://github.com/lagrahhn"}]},"readingTime":{"minutes":3.68,"words":1104},"filePathRelative":"best-practices/best-practices.md","autoDesc":true}');export{p as comp,d as data};
